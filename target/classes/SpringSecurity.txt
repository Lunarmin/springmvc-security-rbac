Spring Security		
	用户	主要包含用户名、密码和当前用户的角色信息
	角色	主要包含角色名称，角色描述和当前角色拥有的权限信息
	权限	权限也可以称为菜单，主要包含当前权限名称、url地址等信息，可实现动态展示菜单
	
	
	概念
		Spring采用AOP思想，基于servlet过滤器实现的安全框架。它提供了完善的认证机制和方法级的授权功能。
		非常优秀的授权框架
		
		spring-security-core.jar
		核心包
		spring-security-web.jar
		web工程必备，包含过滤器和相关web安全基础代码
		spring-security-config.jar
		用于解析xml配置文件
		spring-security-taglibs.jar
		提供动态标签库，jsp页面可以使用
	
	Spring Security是强大的，且容易定制的实现认证，与授权的基于Spring开发的框架。
	
	功能
		1、Authentidation	认证，就是用户登录
		2、Authorrization	授权，判断用户拥有什么权限，可以访问什么资源
		3、安全防护，防止跨站请求
		4、结合SpringMVC


spring-security.xml
1、http-basic方式

<!--   <security:http>	spring过滤器链配置
					1）需要拦截什么资源
					2）什么资源什么角色权限
					3）定义认证方式HttpBasic、FormLogin(*)
					4）定义登录页面，定义登录请求地址，定义错误处理方式
		
	-->
	<security:http>
	
		<!-- 
			pattern 需要拦截资源
			access 拦截方式
				isFullyAuthenticated() 该资源需要认证才能访问
		 -->
		<security:intercept-url pattern="/**" access="isFullyAuthenticated()"/>
		<!--  <security:http-basic/>
					使用HttpBasic方式进行登录
		-->
		<security:http-basic/>
	</security:http>
	
	
	 <security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
            <!-- {MD5}e10adc3949ba59abbe56e057f20f883e -->
                <security:user name="admin" password="{noop}123456" authorities="ROLE_USER"/>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>

2、FormLogin
<!--   <security:http>	spring过滤器链配置
					1）需要拦截什么资源
					2）什么资源什么角色权限
					3）定义认证方式HttpBasic、FormLogin(*)
					4）定义登录页面，定义登录请求地址，定义错误处理方式
	-->
	<security:http>
	
		<!-- 
			pattern 需要拦截资源
			access 拦截方式
				isFullyAuthenticated() 该资源需要认证才能访问
				isAnonymous()  只有匿名用户才可以访问，如果登录用户就不能访问了
				permitAll()    允许所有人访问
		 -->
		 
		<security:intercept-url pattern="/index" access="permitAll()"/>
		<security:intercept-url pattern="/**" access="isFullyAuthenticated()"/>
		<!--  <security:http-basic/>
					使用HttpBasic方式进行登录
		-->
		<!--<security:http-basic/>-->
		
		
		<security:form-login/>
	</security:http>


Spring-Security的原理
	请求
	
		UsernamePasswordAuthenticationFilter
		基于表单用户校验

			BasicAuthenticationFilter
			基于httpBasic方式校验
				
				...
					
					ExceptionTransactionFilter
							
							FilterSecurityInterceptor
							总拦截器
									
									目标资源
									
											返回


	
	
权限管理
	<!--   <security:http>	spring过滤器链配置
					1）需要拦截什么资源
					2）什么资源什么角色权限
					3）定义认证方式HttpBasic、FormLogin(*)
					4）定义登录页面，定义登录请求地址，定义错误处理方式
	-->
	<security:http>
	
		<!-- 
			pattern 需要拦截资源
			access 拦截方式
				isFullyAuthenticated() 该资源需要认证才能访问
				isAnonymous()  只有匿名用户才可以访问，如果登录用户就不能访问了
				permitAll()    允许所有人访问
		 -->
		 
		<security:intercept-url pattern="/index" access="permitAll()"/>
		<security:intercept-url pattern="/userLogin" access="permitAll()"/>
		
		<security:intercept-url pattern="/product/add" access="hasRole('ROLE_ADMIN')"/>
		<security:intercept-url pattern="/product/update" access="hasRole('ROLE_ADMIN')"/>
		<security:intercept-url pattern="/product/delete" access="hasRole('ROLE_ADMIN')"/>
		<security:intercept-url pattern="/product/list" access="hasRole('ROLE_USER')"/>
		
		<security:intercept-url pattern="/**" access="isFullyAuthenticated()"/>
		<!--  <security:http-basic/>
					使用HttpBasic方式进行登录
		-->
		<!--<security:http-basic/>-->
		
		<!-- 
			login-page	自定义登录界面
			login-processing-url	登录请求地址
		 -->
		<security:form-login login-page="/userLogin" login-processing-url="/securityLogin" default-target-url="/index"/>
		
		
		<!-- 自定义权限不足处理 -->
		<security:access-denied-handler error-page="/error"/>
		
		
		<!-- 关闭Spring Security CSRF机制 -->
		<security:csrf disabled="true"/>
	</security:http>
	
	
	 <security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
            <!-- {MD5}e10adc3949ba59abbe56e057f20f883e -->
                <security:user name="admin" password="{noop}123456" authorities="ROLE_ADMIN"/>
                <security:user name="Lisi" password="{noop}123456" authorities="ROLE_USER"/>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>


认证流程
	用户 -- UsernamePasswordAuthenticationFilter -- AuthenticationManager--AuthenticationProvider
											
															-- 认证成功	AuthenticationSuccessHandler
															-- 认证失败 AuthenticationFailureHandler
